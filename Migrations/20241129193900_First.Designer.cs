// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api_bookStore.App.DataBase;

#nullable disable

namespace api_bookStore.Migrations
{
    [DbContext(typeof(BookStoreContext))]
    [Migration("20241129193900_First")]
    partial class First
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("api_bookStore.App.Modules.Auth.Entitiy.AuthEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("auth_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("auth_created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(60)")
                        .HasColumnName("auth_user_email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("auth_user_password");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("varchar(60)")
                        .HasColumnName("auth_user_token");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("auth_updated_at");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(60)")
                        .HasColumnName("auth_user_id");

                    b.HasKey("Id");

                    b.ToTable("auth");
                });

            modelBuilder.Entity("api_bookStore.App.Modules.Author.Entity.AuthorEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("author_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("BirthDay")
                        .HasColumnType("Date")
                        .HasColumnName("author_birthday");

                    b.Property<int>("Country")
                        .HasColumnType("int")
                        .HasColumnName("author_country");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("author_created_at");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("author_name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("author_updated_at");

                    b.HasKey("Id");

                    b.ToTable("author");
                });

            modelBuilder.Entity("api_bookStore.App.Modules.Book.Entity.BookEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("book_id");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("book_authorId");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("book_categoryId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("book_created_at");

                    b.Property<int>("InventoryId")
                        .HasColumnType("int")
                        .HasColumnName("book_inventoryId");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasColumnName("book_price");

                    b.Property<DateOnly>("PublicationDate")
                        .HasColumnType("Date")
                        .HasColumnName("book_publicationDate");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("book_title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("book_updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("book");
                });

            modelBuilder.Entity("api_bookStore.App.Modules.Category.Entity.CategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("category_created_at");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("category_description");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("category_name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("category_updated_at");

                    b.HasKey("Id");

                    b.ToTable("category");
                });

            modelBuilder.Entity("api_bookStore.App.Modules.Inventory.Entity.InventoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("inventory_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("inventory_created_at");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("inventory_quantity");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("inventory_updated_at");

                    b.Property<double>("Value")
                        .HasColumnType("float")
                        .HasColumnName("inventory_value");

                    b.HasKey("Id");

                    b.ToTable("inventory_book");
                });

            modelBuilder.Entity("api_bookStore.App.Modules.Sale.Entity.SaleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("sale_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("sale_status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("sale");
                });

            modelBuilder.Entity("api_bookStore.App.Modules.Sale.Entity.SaleXBookEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("sale_book_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("book_id");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasColumnName("sale_price");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("sale_quantity");

                    b.Property<int>("SaleId")
                        .HasColumnType("int")
                        .HasColumnName("sale_id");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("SaleId");

                    b.ToTable("sale_x_book");
                });

            modelBuilder.Entity("api_bookStore.App.Modules.User.Entity.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("user_created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(60)")
                        .HasColumnName("user_email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(60)")
                        .HasColumnName("user_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_password");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("user_role");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("user_updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("user");
                });

            modelBuilder.Entity("api_bookStore.App.Modules.Book.Entity.BookEntity", b =>
                {
                    b.HasOne("api_bookStore.App.Modules.Author.Entity.AuthorEntity", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api_bookStore.App.Modules.Category.Entity.CategoryEntity", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api_bookStore.App.Modules.Inventory.Entity.InventoryEntity", "Quantity")
                        .WithOne("Book")
                        .HasForeignKey("api_bookStore.App.Modules.Book.Entity.BookEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");

                    b.Navigation("Quantity");
                });

            modelBuilder.Entity("api_bookStore.App.Modules.Sale.Entity.SaleXBookEntity", b =>
                {
                    b.HasOne("api_bookStore.App.Modules.Book.Entity.BookEntity", "Book")
                        .WithMany("SaleXBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api_bookStore.App.Modules.Sale.Entity.SaleEntity", "Sale")
                        .WithMany("SaleXBooks")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("api_bookStore.App.Modules.Author.Entity.AuthorEntity", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("api_bookStore.App.Modules.Book.Entity.BookEntity", b =>
                {
                    b.Navigation("SaleXBooks");
                });

            modelBuilder.Entity("api_bookStore.App.Modules.Category.Entity.CategoryEntity", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("api_bookStore.App.Modules.Inventory.Entity.InventoryEntity", b =>
                {
                    b.Navigation("Book");
                });

            modelBuilder.Entity("api_bookStore.App.Modules.Sale.Entity.SaleEntity", b =>
                {
                    b.Navigation("SaleXBooks");
                });
#pragma warning restore 612, 618
        }
    }
}
