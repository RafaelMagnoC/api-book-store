<?xml version="1.0"?>
<doc>
    <assembly>
        <name>api-bookStore</name>
    </assembly>
    <members>
        <member name="T:api_bookStore.App.Config.AutoMapperConfig">
            <summary>
            Configuração para o AutoMapper na aplicação.
            Este serviço configura o AutoMapper para ser utilizado em toda a aplicação.
            </summary>
        </member>
        <member name="M:api_bookStore.App.Config.AutoMapperConfig.AddAutoMapperConfiguration(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adiciona a configuração do AutoMapper à coleção de serviços.
            </summary>
            <param name="services">A coleção de serviços onde o AutoMapper será registrado.</param>
            <returns>A coleção de serviços com a configuração do AutoMapper registrada.</returns>
            <remarks>
            Este método registra a configuração do AutoMapper com base na classe <see cref="T:api_bookStore.App.Services.AutoMapper.AutoMapperService"/>.
            </remarks>
        </member>
        <member name="T:api_bookStore.App.Config.CorsConfig">
            <summary>
            Configuração do CORS (Cross-Origin Resource Sharing) para a aplicação.
            Este serviço permite configurar as permissões de acesso entre diferentes origens.
            </summary>
        </member>
        <member name="M:api_bookStore.App.Config.CorsConfig.AddCorsConfiguration(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adiciona a configuração de CORS à coleção de serviços.
            </summary>
            <param name="services">A coleção de serviços onde a configuração de CORS será registrada.</param>
            <returns>A coleção de serviços com a configuração de CORS registrada.</returns>
            <remarks>
            Este método configura a política de CORS para permitir requisições da origem <c>http://localhost:8080</c>
            e permite qualquer cabeçalho e método HTTP. 
            O nome da política de CORS é "MyPolicy".
            </remarks>
        </member>
        <member name="T:api_bookStore.App.Config.DataBaseConfig">
            <summary>
            Configuração do banco de dados para a aplicação.
            Este serviço configura o contexto do Entity Framework para se conectar ao banco de dados.
            </summary>
        </member>
        <member name="M:api_bookStore.App.Config.DataBaseConfig.AddDatabaseConfiguration(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Adiciona a configuração do banco de dados à coleção de serviços.
            Configura o contexto do Entity Framework para utilizar o SQL Server com a string de conexão definida no arquivo de configuração.
            </summary>
            <param name="services">A coleção de serviços onde o contexto de banco de dados será registrado.</param>
            <param name="configuration">A configuração da aplicação, usada para obter a string de conexão.</param>
            <returns>A coleção de serviços com a configuração do banco de dados registrada.</returns>
            <remarks>
            Este método registra o contexto <see cref="T:api_bookStore.App.DataBase.BookStoreContext"/> e configura a conexão com o banco de dados 
            utilizando o SQL Server, utilizando a string de conexão chamada "DefaultConnection" presente nas configurações 
            da aplicação (por exemplo, no arquivo appsettings.json).
            </remarks>
        </member>
        <member name="T:api_bookStore.App.Config.JwtConfig">
            <summary>
            Configuração do JWT (JSON Web Token) para a aplicação.
            Este serviço configura a autenticação baseada em JWT, definindo a chave secreta e os parâmetros de validação do token.
            </summary>
        </member>
        <member name="M:api_bookStore.App.Config.JwtConfig.AddJwtConfiguration(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Adiciona a configuração do JWT à coleção de serviços.
            Configura a autenticação baseada em JWT, com parâmetros de validação e chave secreta obtidos das configurações da aplicação.
            </summary>
            <param name="services">A coleção de serviços onde a configuração do JWT será registrada.</param>
            <param name="configuration">A configuração da aplicação, usada para obter a chave secreta do token.</param>
            <returns>A coleção de serviços com a configuração de autenticação JWT registrada.</returns>
            <remarks>
            Este método configura o esquema de autenticação JWT, incluindo:
            - Definição da chave secreta do JWT a partir da variável de configuração <c>Jwt:Key</c>.
            - Definição de parâmetros de validação do token, como a chave de assinatura e a desativação de validações de emissor e público.
            - Configuração de que o token não precisa de HTTPS para ser validado.
            </remarks>
            <exception cref="T:System.Exception">Lançada se a chave secreta do JWT não for encontrada nas configurações.</exception>
        </member>
        <member name="T:api_bookStore.App.Config.SwaggerConfig">
            <summary>
            Configuração do Swagger para a aplicação.
            Este serviço configura o Swagger, incluindo a documentação de API, filtros de operações, segurança, e enumerações.
            </summary>
        </member>
        <member name="M:api_bookStore.App.Config.SwaggerConfig.AddSwaggerConfiguration(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adiciona a configuração do Swagger à coleção de serviços.
            Configura o Swagger para gerar a documentação da API, incluindo filtros de operações, segurança com JWT,
            e mapeamento de enums para a documentação.
            </summary>
            <param name="services">A coleção de serviços onde o Swagger será configurado.</param>
            <returns>A coleção de serviços com a configuração do Swagger registrada.</returns>
            <remarks>
            Este método:
            - Adiciona um filtro de operação para personalizar a documentação de operações via o <see cref="T:api_bookStore.App.Services.Swagger.SwaggerService"/>.
            - Configura o Swagger para suportar segurança com tokens Bearer (JWT).
            - Mapeia enums como <see cref="T:api_bookStore.App.Enums.RolesEnum"/>, <see cref="T:api_bookStore.App.Enums.CountriesEnum"/>, e <see cref="T:api_bookStore.App.Enums.SaleStatusEnum"/> para documentação.
            - Inclui comentários XML gerados para as operações da API, utilizando um arquivo XML de documentação.
            </remarks>
        </member>
        <member name="T:api_bookStore.App.Config.TransientConfig">
            <summary>
            Configuração de serviços transientes para a aplicação.
            Este serviço configura as dependências que serão injetadas como transientes na aplicação.
            </summary>
        </member>
        <member name="M:api_bookStore.App.Config.TransientConfig.AddTransientConfiguration(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adiciona as dependências transientes à coleção de serviços.
            Registra as interfaces e suas implementações para que sejam injetadas como transientes na aplicação.
            </summary>
            <param name="services">A coleção de serviços onde as dependências serão registradas.</param>
            <returns>A coleção de serviços com as dependências transientes registradas.</returns>
            <remarks>
            Este método registra as interfaces e suas respectivas implementações como serviços transientes, ou seja, 
            uma nova instância será criada cada vez que o serviço for solicitado:
            - <see cref="T:api_bookStore.App.Modules.User.Interface.IUserRepository"/> e <see cref="T:api_bookStore.App.Modules.User.Repository.UserRepository"/>
            - <see cref="T:api_bookStore.App.Modules.Auth.Interface.IAuthRepository"/> e <see cref="T:api_bookStore.App.Modules.Auth.Repository.AuthRepository"/>
            - <see cref="T:api_bookStore.App.Modules.Author.Interface.IAuthorRepository"/> e <see cref="T:api_bookStore.App.Modules.Author.Repository.AuthorRepository"/>
            - <see cref="T:api_bookStore.App.Modules.Category.Interface.ICategoryRepository"/> e <see cref="T:api_bookStore.App.Modules.Category.Repository.CategoryRepository"/>
            - <see cref="T:api_bookStore.App.Modules.Inventory.Interface.IInventoryRepository"/> e <see cref="T:api_bookStore.App.Modules.Inventory.Repository.InventoryRepository"/>
            - <see cref="T:api_bookStore.App.Modules.Book.Interface.IBookRepository"/> e <see cref="T:api_bookStore.App.Modules.Book.Repository.BookRepository"/>
            - <see cref="T:api_bookStore.App.Modules.Sale.Interface.ISaleRepository"/> e <see cref="T:api_bookStore.App.Modules.Sale.Repository.SaleRepository"/>
            </remarks>
        </member>
        <member name="T:api_bookStore.App.DataBase.BookStoreContext">
            <summary>
            Contexto de banco de dados da aplicação BookStore.
            Herda de <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/> e representa a unidade de trabalho para a interação com o banco de dados.
            Construtor do contexto que recebe as opções de configuração do banco de dados.
            </summary>
            <param name="options">Opções de configuração para o DbContext.</param>
        </member>
        <member name="M:api_bookStore.App.DataBase.BookStoreContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions)">
            <summary>
            Contexto de banco de dados da aplicação BookStore.
            Herda de <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/> e representa a unidade de trabalho para a interação com o banco de dados.
            Construtor do contexto que recebe as opções de configuração do banco de dados.
            </summary>
            <param name="options">Opções de configuração para o DbContext.</param>
        </member>
        <member name="P:api_bookStore.App.DataBase.BookStoreContext.User">
            <summary>
            Conjunto de entidades de usuários.
            </summary>
        </member>
        <member name="P:api_bookStore.App.DataBase.BookStoreContext.Auth">
            <summary>
            Conjunto de entidades de autenticação.
            </summary>
        </member>
        <member name="P:api_bookStore.App.DataBase.BookStoreContext.Author">
            <summary>
            Conjunto de entidades de autores.
            </summary>
        </member>
        <member name="P:api_bookStore.App.DataBase.BookStoreContext.Category">
            <summary>
            Conjunto de entidades de categorias de livros.
            </summary>
        </member>
        <member name="P:api_bookStore.App.DataBase.BookStoreContext.Inventory">
            <summary>
            Conjunto de entidades de inventário.
            </summary>
        </member>
        <member name="P:api_bookStore.App.DataBase.BookStoreContext.Book">
            <summary>
            Conjunto de entidades de livros.
            </summary>
        </member>
        <member name="P:api_bookStore.App.DataBase.BookStoreContext.Sale">
            <summary>
            Conjunto de entidades de vendas.
            </summary>
        </member>
        <member name="P:api_bookStore.App.DataBase.BookStoreContext.SaleXBook">
            <summary>
            Conjunto de entidades que representam a relação entre vendas e livros.
            </summary>
        </member>
        <member name="M:api_bookStore.App.DataBase.BookStoreContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Configurações adicionais para o modelo de dados, incluindo a criação de índices e relacionamentos.
            </summary>
            <param name="modelBuilder">O construtor de modelos usado para configurar o esquema do banco de dados.</param>
        </member>
        <member name="T:api_bookStore.App.Enums.CountriesEnum">
            <summary>
            Enumeração que representa países com valores numéricos associados.
            Cada valor corresponde a um país específico.
            </summary>
        </member>
        <member name="T:api_bookStore.App.Enums.RolesEnum">
            <summary>
            Enumeração que representa os papéis de usuário no sistema.
            Cada valor corresponde a um papel específico, que define as permissões de acesso no sistema.
            </summary>
        </member>
        <member name="F:api_bookStore.App.Enums.RolesEnum.Admin">
            <summary>
            Papel de administrador, com permissões completas.
            </summary>
        </member>
        <member name="F:api_bookStore.App.Enums.RolesEnum.Default">
            <summary>
            Papel padrão, com permissões básicas.
            </summary>
        </member>
        <member name="T:api_bookStore.App.Enums.SaleStatusEnum">
            <summary>
            Enumeração que representa os diferentes status de uma venda.
            Cada valor corresponde ao status atual de uma venda no sistema.
            </summary>
        </member>
        <member name="F:api_bookStore.App.Enums.SaleStatusEnum.open">
            <summary>
            Status indicando que a venda está aberta e em andamento.
            </summary>
        </member>
        <member name="F:api_bookStore.App.Enums.SaleStatusEnum.pending">
            <summary>
            Status indicando que a venda está pendente, aguardando uma ação ou conclusão.
            </summary>
        </member>
        <member name="F:api_bookStore.App.Enums.SaleStatusEnum.canceled">
            <summary>
            Status indicando que a venda foi cancelada.
            </summary>
        </member>
        <member name="F:api_bookStore.App.Enums.SaleStatusEnum.failed">
            <summary>
            Status indicando que a venda falhou devido a algum erro.
            </summary>
        </member>
        <member name="F:api_bookStore.App.Enums.SaleStatusEnum.closed">
            <summary>
            Status indicando que a venda foi concluída e fechada.
            </summary>
        </member>
        <member name="M:api_bookStore.App.Modules.Author.Controller.AuthorController.AuthorAdd(api_bookStore.App.Modules.Author.ViewModel.AuthorViewModelCreate)">
             <summary>
             Adiciona um novo autor ao sistema.
             </summary>
              <remarks>
             Exemplo:
            
                 POST /author
                 {
                     "id": 1,
                     "name": "Joao da Silva",
                     "birthday": "1990-01-01",
                     "country": "Brazil",
                 }
            
             </remarks>
             <param name="authorViewModelCreate">O modelo de autor contendo os dados a serem cadastrados.</param>
             <returns>O autor recém-adicionado.</returns>
             <response code="200">Retorna o autor com sucesso.</response>
             <response code="400">Caso ocorra um erro de solicitação (ex: dados inválidos).</response>
             <response code="500">Se ocorrer um erro interno no servidor.</response>
        </member>
        <member name="M:api_bookStore.App.Modules.Author.Controller.AuthorController.Authors">
             <summary>
             Busca todos autores cadastrados no sistema.
             </summary>
              <remarks>
             Exemplo:
            
                 GET /authors
                 [
                     {
                         "id": 1,
                         "name": "Joao da Silva 1",
                         "birthday": "1990-01-01",
                         "country": "Brazil",
                     },
                     {
                         "id": 1,
                         "name": "Joao da Silva 2",
                         "birthday": "1990-01-01",
                         "country": "Brazil",
                     },
                     {
                         "id": 1,
                         "name": "Joao da Silva 3",
                         "birthday": "1990-01-01",
                         "country": "Brazil",
                     },
                 ]
            
             </remarks>
             <returns>Lista de autors cadastrados.</returns>
             <response code="200">Retorna uma lista com todos autores ou vazia com sucesso.</response>
             <response code="400">Caso ocorra um erro de solicitação (ex: dados inválidos).</response>
             <response code="500">Se ocorrer um erro interno no servidor.</response>
        </member>
        <member name="M:api_bookStore.App.Modules.Author.Controller.AuthorController.Author(System.Int32)">
             <summary>
             Busca um autor no sistema pelo seu id.
             </summary>
              <remarks>
             Exemplo:
            
                 GET /author/id-do-autor
            
             </remarks>
             <param name="authorId">O id do autor pesquisado.</param>
             <returns>O autor encontrado.</returns>
             <response code="200">Retorna o autor com sucesso.</response>
             <response code="400">Caso ocorra um erro de solicitação (ex: dados inválidos).</response>
             <response code="404">Caso não encontra o autor.</response>
             <response code="500">Se ocorrer um erro interno no servidor.</response>
        </member>
        <member name="M:api_bookStore.App.Modules.Author.Controller.AuthorController.AuthorAtt(System.Int32,api_bookStore.App.Modules.Author.ViewModel.AuthorViewModelUpdate)">
             <summary>
             Atualiza os dados de um autor no sistema pelo seu id.
             </summary>
              <remarks>
             Exemplo:
            
                 PATCH /author/id-do-autor
                 {
                     "id": 1,
                     "name": "Joao da Silva",
                     "birthday": "1990-01-01",
                     "country": "Brazil",
                 }
            
             </remarks>
             <param name="authorId">O id do autor pesquisado.</param>
             <param name="authorViewModelUpdate">O modelo de autor contendo os dados a serem cadastrados.</param>
             <returns>O autor com dados atualizados.</returns>
             <response code="200">Retorna o autor atualizado com sucesso.</response>
             <response code="400">Caso ocorra um erro de solicitação (ex: dados inválidos).</response>
             <response code="404">Caso não encontra o autor.</response>
             <response code="422">Caso ocorra um problema durante a atualização.</response>
             <response code="500">Se ocorrer um erro interno no servidor.</response>
        </member>
        <member name="M:api_bookStore.App.Modules.Author.Controller.AuthorController.AuthorDel(System.Int32)">
             <summary>
             Deleta um autor no sistema pelo seu id.
             </summary>
              <remarks>
             Exemplo:
            
                 Delete /author/id-do-autor
            
             </remarks>
             <param name="authorId">O id do autor a ser deletado.</param>
             <returns>True ou False.</returns>
             <response code="200">Retorna true se o autor for deletado com sucesso.</response>
             <response code="400">Caso ocorra um erro de solicitação (ex: dados inválidos).</response>
             <response code="404">Caso não encontra o autor.</response>
             <response code="422">Caso ocorra um problema durante a exclusão.</response>
             <response code="500">Se ocorrer um erro interno no servidor.</response>
        </member>
        <member name="M:api_bookStore.App.Modules.Author.Repository.AuthorRepository.AuthorAdd(api_bookStore.App.Modules.Author.ViewModel.AuthorViewModelCreate)">
            <summary>
            Adiciona um novo autor ao sistema.
            </summary>
            <param name="authorViewModelCreate">O modelo de autor que será adicionado.</param>
            <returns>O autor recém-adicionado.</returns>
            <exception cref="T:System.Exception">Lançado quando ocorre um erro interno de servidor.</exception>
        </member>
        <member name="M:api_bookStore.App.Modules.Author.Repository.AuthorRepository.AuthorAtt(System.Int32,api_bookStore.App.Modules.Author.ViewModel.AuthorViewModelUpdate)">
            <summary>
            Atualiza os dados de um autor no sistema pelo seu id.
            </summary>
            <param name="authorId">O id do autor pesquisado.</param>
            <param name="authorViewModelUpdate">O modelo de autor contendo os dados a serem cadastrados.</param>
            <returns>O autor com dados atualizados.</returns>
            <exception cref="T:api_BookStore.App.Exceptions.NotFound">Lançado quando o autor não é encontrado pelo id.</exception>
            <exception cref="T:api_BookStore.App.Exceptions.UpdateException">Lançado quando ocorre um erro durante a atualização dos dados.</exception>
            <exception cref="T:System.Exception">Lançado quando ocorre um erro interno de servidor.</exception>
        </member>
        <member name="M:api_bookStore.App.Modules.Author.Repository.AuthorRepository.AuthorDel(System.Int32)">
            <summary>
            Deleta um autor no sistema pelo seu id.
            </summary>
            <param name="authorId">O id do autor a ser deletado.</param>
            <returns>True se o autor for deletado com sucesso.</returns>
            <exception cref="T:api_BookStore.App.Exceptions.NotFound">Lançado quando o autor não é encontrado pelo id.</exception>
            <exception cref="T:api_BookStore.App.Exceptions.RemoveException">Lançado quando ocorre um erro durante a exclusão.</exception>
            <exception cref="T:System.Exception">Lançado quando ocorre um erro interno de servidor.</exception>
        </member>
        <member name="M:api_bookStore.App.Modules.Author.Repository.AuthorRepository.Author(System.Int32)">
            <summary>
            Busca um autor no sistema pelo seu id.
            </summary>
            <param name="authorId">O id do autor pesquisado.</param>
            <returns>O autor encontrado.</returns>
            <exception cref="T:System.Exception">Lançado quando ocorre um erro interno de servidor.</exception>
        </member>
        <member name="M:api_bookStore.App.Modules.Author.Repository.AuthorRepository.Authors">
            <summary>
            Busca todos autores cadastrados no sistema.
            </summary>
            <returns>Lista vazia ou de autores cadastrados.</returns>
            <exception cref="T:System.Exception">Lançado quando ocorre um erro interno de servidor.</exception>
        </member>
        <member name="T:api_bookStore.App.Modules.Auth.Controller.AuthController">
            <summary>
            Controlador responsável pelas operações de autenticação de usuários.
            Inclui ações como realizar login e gerar token de autenticação.
            </summary>
            <remarks>
            Inicializa uma nova instância do controlador de autenticação.
            </remarks>
            <param name="authRepository">O repositório de autenticação para operações de login e token.</param>
        </member>
        <member name="M:api_bookStore.App.Modules.Auth.Controller.AuthController.#ctor(api_bookStore.App.Modules.Auth.Interface.IAuthRepository)">
            <summary>
            Controlador responsável pelas operações de autenticação de usuários.
            Inclui ações como realizar login e gerar token de autenticação.
            </summary>
            <remarks>
            Inicializa uma nova instância do controlador de autenticação.
            </remarks>
            <param name="authRepository">O repositório de autenticação para operações de login e token.</param>
        </member>
        <member name="M:api_bookStore.App.Modules.Auth.Controller.AuthController.SingIn(api_bookStore.App.Modules.Auth.ViewModel.AuthViewModel)">
            <summary>
            Realiza o login do usuário e gera um token de autenticação.
            </summary>
            <param name="authEntity">O modelo de autenticação com as credenciais do usuário.</param>
            <returns>Um token JWT que será usado para autenticação em requisições subsequentes.</returns>
            <response code="200">Retorna o token de autenticação gerado.</response>
            <response code="400">Caso as credenciais sejam inválidas ou algum erro ocorra.</response>
        </member>
        <member name="T:api_bookStore.App.Modules.Auth.Repository.AuthRepository">
            <summary>
            Repositório responsável pelas operações de autenticação de usuários, como login e verificação de credenciais.
            </summary>
            <remarks>
            Inicializa uma nova instância do repositório de autenticação.
            </remarks>
            <param name="userRepository">O repositorio de usuários</param>
            <param name="configuration">Configurações da aplicação, como chaves de JWT.</param>
            <param name="passwordServiceHash">O Recurso de math para senhas criptografadas.</param>
            <param name="jwtTokenService">O Recurso de geração de tokens Jwt</param>
        </member>
        <member name="M:api_bookStore.App.Modules.Auth.Repository.AuthRepository.#ctor(api_bookStore.App.Modules.User.Interface.IUserRepository,Microsoft.Extensions.Configuration.IConfiguration,api_bookStore.App.Modules.User.Service.IPasswordServiceHash,api_bookStore.App.Services.Jwt.IJwtTokenService)">
            <summary>
            Repositório responsável pelas operações de autenticação de usuários, como login e verificação de credenciais.
            </summary>
            <remarks>
            Inicializa uma nova instância do repositório de autenticação.
            </remarks>
            <param name="userRepository">O repositorio de usuários</param>
            <param name="configuration">Configurações da aplicação, como chaves de JWT.</param>
            <param name="passwordServiceHash">O Recurso de math para senhas criptografadas.</param>
            <param name="jwtTokenService">O Recurso de geração de tokens Jwt</param>
        </member>
        <member name="M:api_bookStore.App.Modules.Auth.Repository.AuthRepository.SigIn(api_bookStore.App.Modules.Auth.ViewModel.AuthViewModel)">
            <summary>
            Realiza o login de um usuário, verificando as credenciais e gerando um token JWT.
            </summary>
            <param name="authViewModel">O modelo contendo as credenciais do usuário (email e senha).</param>
            <returns>Um token JWT para autenticação.</returns>
            <exception cref="T:api_BookStore.App.Exceptions.NotFound">Lançado quando o usuário com o email fornecido não é encontrado.</exception>
            <exception cref="T:api_BookStore.App.Exceptions.InvalidCredential">Lançado quando as credenciais fornecidas são inválidas.</exception>
        </member>
        <member name="M:api_bookStore.App.Modules.Book.Controller.BookController.BookAdd(api_bookStore.App.Modules.Book.ViewModel.BookViewModelCreate)">
             <summary>
             Adiciona um novo livro ao sistema.
             </summary>
              <remarks>
             Exemplo:
            
                 POST /book
                 {
                     "title": "Star wars",
                     "publicationDate": "1990-01-01",
                     "price": 99.90,
                     "quantity": 5,
                     "authorId": 1,
                     "categoryId": 0
                 }
            
             </remarks>
             <param name="bookViewModelCreate">O modelo de livro que será adicionado.</param>
             <returns>O livro recém-adicionado.</returns>
             <response code="200">Retorna o livro com sucesso.</response>
             <response code="400">Caso ocorra um erro de solicitação (ex: dados inválidos).</response>
             <response code="500">Se ocorrer um erro interno no servidor.</response>
        </member>
        <member name="M:api_bookStore.App.Modules.Book.Controller.BookController.Books(System.String)">
             <summary>
             Busca todos livros cadastrados no sistema.
             </summary>
              <remarks>
             Exemplo:
            
                 GET /books
                 [
                     {
                         "title": "Star wars",
                         "publicationDate": "1990-01-01",
                         "price": 99.90,
                         "quantity": 5,
                         "authorId": 1,
                         "categoryId": 0
                     },
                     {
                         "title": "A bela e a fera",
                         "publicationDate": "1990-01-01",
                         "price": 99.90,
                         "quantity": 6,
                         "authorId": 1,
                         "categoryId": 0
                     },
                     {
                         "title": "Star wars",
                         "publicationDate": "1990-01-01",
                         "price": 99.90,
                         "quantity": 5,
                         "authorId": 1,
                         "categoryId": 0
                     }
                 ]
            
             </remarks>
             <param name="categoryName">O nome da categoria para filtrar a listagem.</param>
             <returns>Lista de livros cadastrados.</returns>
             <response code="200">Retorna uma lista com todos livros ou vazia com sucesso.</response>
             <response code="400">Caso ocorra um erro de solicitação (ex: dados inválidos).</response>
             <response code="500">Se ocorrer um erro interno no servidor.</response>
        </member>
        <member name="M:api_bookStore.App.Modules.Book.Controller.BookController.Book(System.Int32)">
             <summary>
             Busca um livro no sistema pelo seu id.
             </summary>
              <remarks>
             Exemplo:
            
                 GET /book/id-do-livro
            
             </remarks>
             <param name="bookId">O id do livro pesquisado.</param>
             <returns>O livro encontrado.</returns>
             <response code="200">Retorna o livro com sucesso.</response>
             <response code="400">Caso ocorra um erro de solicitação (ex: dados inválidos).</response>
             <response code="404">Caso não encontra o livro.</response>
             <response code="500">Se ocorrer um erro interno no servidor.</response>
        </member>
        <member name="M:api_bookStore.App.Modules.Book.Controller.BookController.BookByTitle(System.String)">
             <summary>
             Busca um livro no sistema pelo seu título.
             </summary>
              <remarks>
             Exemplo:
            
                 GET /book/titulo-do-livro
            
             </remarks>
             <param name="title">O título do livro pesquisado.</param>
             <returns>O livro encontrado.</returns>
             <response code="200">Retorna o livro com sucesso.</response>
             <response code="400">Caso ocorra um erro de solicitação (ex: dados inválidos).</response>
             <response code="404">Caso não encontra o livro.</response>
             <response code="500">Se ocorrer um erro interno no servidor.</response>
        </member>
        <member name="M:api_bookStore.App.Modules.Book.Controller.BookController.BookAtt(System.Int32,api_bookStore.App.Modules.Book.ViewModel.BookViewModelUpdate)">
             <summary>
             Atualiza os dados de um livro no sistema pelo seu id.
             </summary>
              <remarks>
             Exemplo:
            
                 PATCH /book/id-do-livro
                 {
                     "title": "Star wars",
                     "publicationDate": "1990-01-01",
                     "price": 99.90,
                     "quantity": 5,
                     "authorId": 1,
                     "categoryId": 0
                 }
            
             </remarks>
             <param name="bookId">O id do livro pesquisado.</param>
             <param name="bookViewModelUpdate">O modelo de livro contendo os dados a serem cadastrados.</param>
             <returns>O livro com dados atualizados.</returns>
             <response code="200">Retorna o livro atualizado com sucesso.</response>
             <response code="400">Caso ocorra um erro de solicitação (ex: dados inválidos).</response>
             <response code="404">Caso não encontra o livro.</response>
             <response code="422">Caso ocorra um problema durante a atualização.</response>
             <response code="500">Se ocorrer um erro interno no servidor.</response>
        </member>
        <member name="M:api_bookStore.App.Modules.Book.Controller.BookController.BookDel(System.Int32)">
             <summary>
             Deleta um livro no sistema pelo seu id.
             </summary>
              <remarks>
             Exemplo:
            
                 Delete /book/id-do-livro
            
             </remarks>
             <param name="bookId">O id do livro a ser deletado.</param>
             <returns>True ou False.</returns>
             <response code="200">Retorna true se o livro for deletado com sucesso.</response>
             <response code="400">Caso ocorra um erro de solicitação (ex: dados inválidos).</response>
             <response code="404">Caso não encontra o livro.</response>
             <response code="422">Caso ocorra um problema durante a exclusão.</response>
             <response code="500">Se ocorrer um erro interno no servidor.</response>
        </member>
        <member name="M:api_bookStore.App.Modules.Book.Repository.BookRepository.BookAdd(api_bookStore.App.Modules.Book.ViewModel.BookViewModelCreate)">
            <summary>
            Adiciona um novo livro ao sistema.
            </summary>
            <param name="bookViewModelCreate">O modelo de livro que será adicionado.</param>
            <returns>O livro recém-adicionado.</returns>
            <exception cref="T:System.Exception">Lançado quando ocorre um erro interno de servidor.</exception>
        </member>
        <member name="M:api_bookStore.App.Modules.Book.Repository.BookRepository.InventoryAdd(api_bookStore.App.Modules.Inventory.ViewModel.InventoryViewModelCreate)">
            <summary>
            Adiciona uma quantidade de produto ao sistema.
            </summary>
            <param name="inventoryViewModel">O modelo de inventário que será adicionada.</param>
            <returns>a quantidade do produto recém-adicionada.</returns>
            <exception cref="T:System.Exception">Lançado quando ocorre um erro interno de servidor.</exception>
        </member>
        <member name="M:api_bookStore.App.Modules.Book.Repository.BookRepository.BookAtt(System.Int32,api_bookStore.App.Modules.Book.ViewModel.BookViewModelUpdate)">
            <summary>
            Atualiza os dados de um livro no sistema pelo seu id.
            </summary>
            <param name="bookId">O id do livro pesquisado.</param>
            <param name="bookViewModelUpdate">O modelo de livro contendo os dados a serem cadastrados.</param>
            <returns>O livro com dados atualizados.</returns>
            <exception cref="T:api_BookStore.App.Exceptions.NotFound">Lançado quando o livro não é encontrado pelo id.</exception>
            <exception cref="T:api_BookStore.App.Exceptions.UpdateException">Lançado quando ocorre um erro durante a atualização dos dados.</exception>
            <exception cref="T:System.Exception">Lançado quando ocorre um erro interno de servidor.</exception>
        </member>
        <member name="M:api_bookStore.App.Modules.Book.Repository.BookRepository.BookDel(System.Int32)">
            <summary>
            Deleta um livro no sistema pelo seu id.
            </summary>
            <param name="bookId">O id do livro a ser deletado.</param>
            <returns>True se o livro for deletado com sucesso.</returns>
            <exception cref="T:api_BookStore.App.Exceptions.NotFound">Lançado quando o livro não é encontrado pelo id.</exception>
            <exception cref="T:api_BookStore.App.Exceptions.RemoveException">Lançado quando ocorre um erro durante a exclusão.</exception>
            <exception cref="T:System.Exception">Lançado quando ocorre um erro interno de servidor.</exception>
        </member>
        <member name="M:api_bookStore.App.Modules.Book.Repository.BookRepository.Book(System.Int32)">
            <summary>
            Busca um livro no sistema pelo seu id.
            </summary>
            <param name="bookId">O id do livro pesquisado.</param>
            <returns>O livro encontrado.</returns>
            <exception cref="T:System.Exception">Lançado quando ocorre um erro interno de servidor.</exception>
        </member>
        <member name="M:api_bookStore.App.Modules.Book.Repository.BookRepository.Books(System.String)">
            <summary>
            Busca todos livros cadastrados no sistema.
            </summary>
            <param name="categoryName">O nome da categoria para filtrar a listagem.</param>
            <returns>Lista vazia ou de livros cadastrados.</returns>
            <exception cref="T:System.Exception">Lançado quando ocorre um erro interno de servidor.</exception>
        </member>
        <member name="M:api_bookStore.App.Modules.Book.Repository.BookRepository.BookByTitle(System.String)">
            <summary>
            Recupera um livro do banco de dados pelo título e retorna um DTO com as informações do livro.
            </summary>
            <param name="title">O título do livro a ser recuperado.</param>
            <returns>Um DTO contendo os detalhes do livro.</returns>
            <exception cref="T:api_BookStore.App.Exceptions.NotFound">Lançado quando nenhum livro com o título especificado é encontrado.</exception>
            <exception cref="T:System.Exception">Lançado em caso de erro ao acessar o banco de dados.</exception>
        </member>
        <member name="M:api_bookStore.App.Modules.Category.Controller.CategoryController.CategoryAdd(api_bookStore.App.Modules.Category.ViewModel.CategoryViewModelCreate)">
             <summary>
             Adiciona uma nova categoria ao sistema.
             </summary>
              <remarks>
             Exemplo:
            
                 POST /category
                 {
                     "name": "Aventura",
                     "description": "Livros de aventura são repletos de emoção, desafios e viagens inesperadas."
                 }
            
             </remarks>
             <param name="categoryViewModelCreate">O modelo de categoria contendo os dados a serem cadastradas.</param>
             <returns>a categoria recém-adicionado.</returns>
             <response code="200">Retorna a categoria com sucesso.</response>
             <response code="400">Caso ocorra um erro de solicitação (ex: dados inválidos).</response>
             <response code="500">Se ocorrer um erro interno no servidor.</response>
        </member>
        <member name="M:api_bookStore.App.Modules.Category.Controller.CategoryController.Categories">
             <summary>
             Busca todas categorias cadastradas no sistema.
             </summary>
              <remarks>
             Exemplo:
            
                 GET /categories
                 [
                     {
                         "name": "Aventura",
                         "description": "Livros de aventura são repletos de emoção, desafios e viagens inesperadas."
                     },
                     {
                         "name": "Ficção",
                         "description": "A ficção cria universos imaginários e histórias que desafiam a realidade."
                     },
                     {
                         "name": "Romance",
                         "description": "Livros de romance focam nas relações humanas, em especial nas paixões e emoções intensas."
                     },
                 ]
            
             </remarks>
             <returns>Lista de categorias cadastradas.</returns>
             <response code="200">Retorna uma lista com todas categoriaes ou vazia com sucesso.</response>
             <response code="400">Caso ocorra um erro de solicitação (ex: dados inválidos).</response>
             <response code="500">Se ocorrer um erro interno no servidor.</response>
        </member>
        <member name="M:api_bookStore.App.Modules.Category.Controller.CategoryController.Category(System.Int32)">
             <summary>
             Busca uma categoria no sistema pelo seu id.
             </summary>
              <remarks>
             Exemplo:
            
                 GET /category/id-da-categoria
            
             </remarks>
             <param name="categoryId">O id da categoria pesquisada.</param>
             <returns>A categoria encontrada.</returns>
             <response code="200">Retorna a categoria com sucesso.</response>
             <response code="400">Caso ocorra um erro de solicitação (ex: dados inválidos).</response>
             <response code="404">Caso não encontre a categoria.</response>
             <response code="500">Se ocorrer um erro interno no servidor.</response>
        </member>
        <member name="M:api_bookStore.App.Modules.Category.Controller.CategoryController.CategoryAtt(System.Int32,api_bookStore.App.Modules.Category.ViewModel.CategoryViewModelUpdate)">
             <summary>
             Atualiza os dados de uma categoria no sistema pelo seu id.
             </summary>
              <remarks>
             Exemplo:
            
                 PATCH /category/id-da-categoria
                 {
                     "name": "Aventura",
                     "description": "Livros de aventura são repletos de emoção, desafios e viagens inesperadas."
                 }
            
             </remarks>
             <param name="categoryId">O id da categoria pesquisada.</param>
             <param name="categoryViewModelUpdate">O modelo de categoria contendo os dados a serem cadastrados.</param>
             <returns>a categoria com dados atualizados.</returns>
             <response code="200">Retorna a categoria atualizada com sucesso.</response>
             <response code="400">Caso ocorra um erro de solicitação (ex: dados inválidos).</response>
             <response code="404">Caso não encontre a categoria.</response>
             <response code="422">Caso ocorra um problema durante a atualização.</response>
             <response code="500">Se ocorrer um erro interno no servidor.</response>
        </member>
        <member name="M:api_bookStore.App.Modules.Category.Controller.CategoryController.CategoryDel(System.Int32)">
             <summary>
             Deleta uma categoria no sistema pelo seu id.
             </summary>
              <remarks>
             Exemplo:
            
                 Delete /category/id-da-categoria
            
             </remarks>
             <param name="categoryId">O id da categoria a ser deletada.</param>
             <returns>True ou False.</returns>
             <response code="200">Retorna true se a categoria for deletada com sucesso.</response>
             <response code="400">Caso ocorra um erro de solicitação (ex: dados inválidos).</response>
             <response code="404">Caso não encontre a categoria.</response>
             <response code="422">Caso ocorra um problema durante a exclusão.</response>
             <response code="500">Se ocorrer um erro interno no servidor.</response>
        </member>
        <member name="M:api_bookStore.App.Modules.Category.Repository.CategoryRepository.CategoryAdd(api_bookStore.App.Modules.Category.ViewModel.CategoryViewModelCreate)">
            <summary>
            Adiciona uma nova categoria ao sistema.
            </summary>
            <param name="categoryViewModelCreate">O modelo de categoria que será adicionada.</param>
            <returns>a categoria recém-adicionada.</returns>
            <exception cref="T:System.Exception">Lançado quando ocorre um erro interno de servidor.</exception>
        </member>
        <member name="M:api_bookStore.App.Modules.Category.Repository.CategoryRepository.CategoryAtt(System.Int32,api_bookStore.App.Modules.Category.ViewModel.CategoryViewModelUpdate)">
            <summary>
            Atualiza os dados de uma categoria no sistema pelo seu id.
            </summary>
            <param name="categoryId">O id da categoria pesquisado.</param>
            <param name="categoryViewModelUpdate">O modelo de categoria contendo os dados a serem cadastrados.</param>
            <returns>a categoria com dados atualizados.</returns>
            <exception cref="T:api_BookStore.App.Exceptions.NotFound">Lançado quando a categoria não é encontrada pelo id.</exception>
            <exception cref="T:api_BookStore.App.Exceptions.UpdateException">Lançado quando ocorre um erro durante a atualização dos dados.</exception>
            <exception cref="T:System.Exception">Lançado quando ocorre um erro interno de servidor.</exception>
        </member>
        <member name="M:api_bookStore.App.Modules.Category.Repository.CategoryRepository.CategoryDel(System.Int32)">
            <summary>
            Deleta uma categoria no sistema pelo seu id.
            </summary>
            <param name="categoryId">O id da categoria a ser deletado.</param>
            <returns>True se a categoria for deletado com sucesso.</returns>
            <exception cref="T:api_BookStore.App.Exceptions.NotFound">Lançado quando a categoria não é encontrada pelo id.</exception>
            <exception cref="T:api_BookStore.App.Exceptions.RemoveException">Lançado quando ocorre um erro durante a exclusão.</exception>
            <exception cref="T:System.Exception">Lançado quando ocorre um erro interno de servidor.</exception>
        </member>
        <member name="M:api_bookStore.App.Modules.Category.Repository.CategoryRepository.Category(System.Int32)">
            <summary>
            Busca uma categoria no sistema pelo seu id.
            </summary>
            <param name="categoryId">O id da categoria pesquisado.</param>
            <returns>a categoria encontrada.</returns>
            <exception cref="T:System.Exception">Lançado quando ocorre um erro interno de servidor.</exception>
        </member>
        <member name="M:api_bookStore.App.Modules.Category.Repository.CategoryRepository.Categories">
            <summary>
            Busca todas categorias cadastradas no sistema.
            </summary>
            <returns>Lista vazia ou de categorias cadastradas.</returns>
            <exception cref="T:System.Exception">Lançado quando ocorre um erro interno de servidor.</exception>
        </member>
        <member name="M:api_bookStore.App.Modules.Inventory.Repository.InventoryRepository.InventoryAdd(api_bookStore.App.Modules.Inventory.ViewModel.InventoryViewModelCreate)">
            <summary>
            Adiciona uma quantidade de produto ao sistema.
            </summary>
            <param name="inventoryViewModelCreate">O modelo de inventário que será adicionada.</param>
            <returns>a quantidade do produto recém-adicionada.</returns>
            <exception cref="T:System.Exception">Lançado quando ocorre um erro interno de servidor.</exception>
        </member>
        <member name="M:api_bookStore.App.Modules.Inventory.Repository.InventoryRepository.InventoryAtt(System.String,api_bookStore.App.Modules.Inventory.ViewModel.InventoryViewModelUpdate)">
            <summary>
            Atualiza os dados de um inventário no sistema pelo seu id.
            </summary>
            <param name="inventoryId">O id da inventário pesquisado.</param>
            <param name="inventoryViewModelUpdate">O modelo de inventário contendo os dados a serem cadastrados.</param>
            <returns>a inventário com dados atualizados.</returns>
            <exception cref="T:api_BookStore.App.Exceptions.NotFound">Lançado quando a inventário não é encontrado pelo id.</exception>
            <exception cref="T:api_BookStore.App.Exceptions.UpdateException">Lançado quando ocorre um erro durante a atualização dos dados.</exception>
            <exception cref="T:System.Exception">Lançado quando ocorre um erro interno de servidor.</exception>
        </member>
        <member name="M:api_bookStore.App.Modules.Inventory.Repository.InventoryRepository.InventoryDel(System.String)">
            <summary>
            Deleta um inventário no sistema pelo seu id.
            </summary>
            <param name="inventoryId">O id da inventário a ser deletado.</param>
            <returns>True se o inventário for deletado com sucesso.</returns>
            <exception cref="T:api_BookStore.App.Exceptions.NotFound">Lançado quando o inventário não é encontrado pelo id.</exception>
            <exception cref="T:api_BookStore.App.Exceptions.RemoveException">Lançado quando ocorre um erro durante a exclusão.</exception>
            <exception cref="T:System.Exception">Lançado quando ocorre um erro interno de servidor.</exception>
        </member>
        <member name="M:api_bookStore.App.Modules.Inventory.Repository.InventoryRepository.Inventory(System.String)">
            <summary>
            Busca um inventário no sistema pelo seu id.
            </summary>
            <param name="inventoryId">O id do inventário pesquisado.</param>
            <returns>a inventário encontrado.</returns>
            <exception cref="T:System.Exception">Lançado quando ocorre um erro interno de servidor.</exception>
        </member>
        <member name="M:api_bookStore.App.Modules.Inventory.Repository.InventoryRepository.Inventories">
            <summary>
            Busca todos inventários cadastradas no sistema.
            </summary>
            <returns>Lista vazia ou de inventários cadastrados.</returns>
            <exception cref="T:System.Exception">Lançado quando ocorre um erro interno de servidor.</exception>
        </member>
        <member name="M:api_bookStore.App.Modules.Sale.Controller.SaleController.SaleAdd(System.Collections.Generic.List{api_bookStore.App.Modules.Sale.ViewModel.SaleViewModelCreate})">
             <summary>
             Registra uma nova venda.
             </summary>
              <remarks>
             Exemplo:
            
                 POST /sale
                 [
                     {
                         "bookId": 1,
                         "quantity: 3
                     }
                 ]
            
             </remarks>
             <param name="saleViewModelCreate">Os ids dos livros e quantidades que serão comprados pelo cliente.</param>
             <returns>a categoria recém-adicionado.</returns>
             <response code="200">Retorna a categoria com sucesso.</response>
             <response code="400">Caso ocorra um erro de solicitação (ex: dados inválidos).</response>
             <response code="500">Se ocorrer um erro interno no servidor.</response>
        </member>
        <member name="M:api_bookStore.App.Modules.Sale.Controller.SaleController.Categories">
             <summary>
             Busca todas as vendas registradas no sistema.
             </summary>
              <remarks>
             Exemplo:
            
                 GET /categories
                 [
                     {
                         "id": 1
                     },
                     {
                         "id": 2
                     },
                     {
                         "id": 3
                     },
                 ]
            
             </remarks>
             <returns>Lista de vendas registradas.</returns>
             <response code="200">Retorna uma lista com todas vendas ou vazia com sucesso.</response>
             <response code="400">Caso ocorra um erro de solicitação (ex: dados inválidos).</response>
             <response code="500">Se ocorrer um erro interno no servidor.</response>
        </member>
        <member name="T:api_bookStore.App.Modules.Sale.Repository.SaleRepository">
            <summary>
            Repositório responsável pelas operações de vendas, como adicionar vendas, reduzir o estoque de livros e verificar a disponibilidade dos livros.
            </summary>
            <remarks>
            Inicializa uma nova instância do repositório de vendas.
            </remarks>
            <param name="bookStoreContext">O contexto do banco de dados para acessar as entidades de venda e livro.</param>
            <param name="mapper">Objeto que realiza a conversão entre as entidades e os DTOs.</param>
        </member>
        <member name="M:api_bookStore.App.Modules.Sale.Repository.SaleRepository.#ctor(api_bookStore.App.DataBase.BookStoreContext,AutoMapper.IMapper)">
            <summary>
            Repositório responsável pelas operações de vendas, como adicionar vendas, reduzir o estoque de livros e verificar a disponibilidade dos livros.
            </summary>
            <remarks>
            Inicializa uma nova instância do repositório de vendas.
            </remarks>
            <param name="bookStoreContext">O contexto do banco de dados para acessar as entidades de venda e livro.</param>
            <param name="mapper">Objeto que realiza a conversão entre as entidades e os DTOs.</param>
        </member>
        <member name="M:api_bookStore.App.Modules.Sale.Repository.SaleRepository.SaleAdd(System.Collections.Generic.List{api_bookStore.App.Modules.Sale.ViewModel.SaleViewModelCreate})">
            <summary>
            Adiciona uma nova venda ao sistema, verificando a disponibilidade dos livros e reduzindo o estoque.
            </summary>
            <param name="saleViewModelCreate">A lista de livros e quantidades para a venda.</param>
            <returns>Um DTO representando a venda realizada.</returns>
            <exception cref="T:api_BookStore.App.Exceptions.NotFound">Lançado quando um livro não é encontrado ou não há estoque suficiente.</exception>
            <exception cref="T:api_BookStore.App.Exceptions.AvailableQuantity">Lançado quando um livro não tem saldo suficiente para a venda.</exception>
            <exception cref="T:api_BookStore.App.Exceptions.CreateException">Lançado quando ocorre um erro ao registrar a venda.</exception>
        </member>
        <member name="M:api_bookStore.App.Modules.Sale.Repository.SaleRepository.ReduceBookStock(System.Collections.Generic.List{api_bookStore.App.Modules.Sale.ViewModel.SaleViewModelCreate})">
            <summary>
            Reduz o estoque dos livros após a venda, verificando a quantidade disponível.
            </summary>
            <param name="saleViewModelCreate">A lista de livros e quantidades que foram vendidas.</param>
            <returns>A lista de livros atualizados após a venda.</returns>
            <exception cref="T:api_BookStore.App.Exceptions.NotFound">Lançado quando um livro não é encontrado.</exception>
            <exception cref="T:api_BookStore.App.Exceptions.AvailableQuantity">Lançado quando o estoque de um livro é insuficiente.</exception>
        </member>
        <member name="M:api_bookStore.App.Modules.Sale.Repository.SaleRepository.BookExists(System.Collections.Generic.List{System.Int32})">
            <summary>
            Verifica se os livros existem no banco de dados.
            </summary>
            <param name="bookIds">A lista de IDs dos livros a serem verificados.</param>
            <returns>A lista de livros encontrados no banco de dados.</returns>
            <exception cref="T:api_BookStore.App.Exceptions.NotFound">Lançado quando algum dos livros não é encontrado.</exception>
        </member>
        <member name="M:api_bookStore.App.Modules.Sale.Repository.SaleRepository.CheckBookStock(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{api_bookStore.App.Modules.Sale.ViewModel.SaleViewModelCreate})">
            <summary>
            Verifica a quantidade de estoque disponível para os livros antes de registrar a venda.
            </summary>
            <param name="bookIds">A lista de IDs dos livros.</param>
            <param name="saleViewModelCreate">A lista de livros e quantidades da venda.</param>
            <returns>A lista de livros que possuem estoque suficiente.</returns>
            <exception cref="T:api_BookStore.App.Exceptions.AvailableQuantity">Lançado quando algum livro não tem saldo suficiente para a venda.</exception>
        </member>
        <member name="M:api_bookStore.App.Modules.Sale.Repository.SaleRepository.Sales">
            <summary>
            Retorna todos as vendas registradas no sistema.
            </summary>
            <returns>A lista de DTOs de vendas.</returns>
        </member>
        <member name="M:api_bookStore.App.Modules.User.Controller.UserController.UserAdd(api_bookStore.App.Modules.User.ViewModel.UserViewModelCreate)">
             <summary>
             Adiciona um novo usuário ao sistema.
             </summary>
              <remarks>
             Exemplo:
            
                 POST /user
                 {
                     "name": "Joao da Silva",
                     "email": "joao@usuario.com",
                     "password": "MyPassword2025",
                     "role": "Admin ou Default"
                 }
            
             </remarks>
             <param name="userViewModelCreate">O modelo de usuário contendo os dados a serem cadastrados.</param>
             <returns>O usuário recém-adicionado.</returns>
             <response code="200">Retorna o usuário com sucesso.</response>
             <response code="400">Caso ocorra um erro de solicitação (ex: dados inválidos).</response>
             <response code="500">Se ocorrer um erro interno no servidor.</response>
        </member>
        <member name="M:api_bookStore.App.Modules.User.Controller.UserController.Users">
             <summary>
             Busca todos usuários cadastrados no sistema.
             </summary>
              <remarks>
             Exemplo:
            
                 GET /users
                 [
                     {
                         "name": "Joao da Silva 1",
                         "email": "joao@usuario.com",
                         "password": "MyPassword2025",
                         "role": "Default"
                     },
                     {
                         "name": "Joao da Silva 2",
                         "email": "joao@usuario.com",
                         "password": "MyPassword2025",
                         "role": "Default"
                     },
                     {
                         "name": "Joao da Silva 3",
                         "email": "joao@usuario.com",
                         "password": "MyPassword2025",
                         "role": "Admin"
                     },
                 ]
            
             </remarks>
             <returns>Lista de usuarios cadastrados.</returns>
             <response code="200">Retorna uma lista com usuários ou vazia com sucesso.</response>
             <response code="400">Caso ocorra um erro de solicitação (ex: dados inválidos).</response>
             <response code="500">Se ocorrer um erro interno no servidor.</response>
        </member>
        <member name="M:api_bookStore.App.Modules.User.Controller.UserController.UserById(System.String)">
             <summary>
             Busca um usuário no sistema pelo seu id.
             </summary>
              <remarks>
             Exemplo:
            
                 GET /user/id-do-usuario
            
             </remarks>
             <param name="userId">O id do usuário pesquisado.</param>
             <returns>O usuário encontrado.</returns>
             <response code="200">Retorna o usuário com sucesso.</response>
             <response code="400">Caso ocorra um erro de solicitação (ex: dados inválidos).</response>
             <response code="404">Caso não encontra o usuário.</response>
             <response code="500">Se ocorrer um erro interno no servidor.</response>
        </member>
        <member name="M:api_bookStore.App.Modules.User.Controller.UserController.UserAtt(System.String,api_bookStore.App.Modules.User.ViewModel.UserViewModelUpdate)">
             <summary>
             Atualiza os dados de um usuário no sistema pelo seu id.
             </summary>
              <remarks>
             Exemplo:
            
                 PATCH /user/id-do-usuario
                 {
                     "name": "Joao da Silva",
                     "email": "joao@usuario.com",
                     "password": "MyPassword2025",
                     "role": "Admin ou Default"
                 }
            
             </remarks>
             <param name="userId">O id do usuário pesquisado.</param>
             <param name="userViewModelUpdate">O modelo de usuário contendo os dados a serem cadastrados.</param>
             <returns>O usuário com dados atualizados.</returns>
             <response code="200">Retorna o usuário atualizado com sucesso.</response>
             <response code="400">Caso ocorra um erro de solicitação (ex: dados inválidos).</response>
             <response code="404">Caso não encontra o usuário.</response>
             <response code="422">Caso ocorra um problema durante a atualização.</response>
             <response code="500">Se ocorrer um erro interno no servidor.</response>
        </member>
        <member name="M:api_bookStore.App.Modules.User.Controller.UserController.UserDel(System.String)">
             <summary>
             Deleta um usuário no sistema pelo seu id.
             </summary>
              <remarks>
             Exemplo:
            
                 Delete /user/id-do-usuario
            
             </remarks>
             <param name="userId">O id do usuário a ser deletado.</param>
             <returns>True ou False.</returns>
             <response code="200">Retorna true se o usuário for deletado com sucesso.</response>
             <response code="400">Caso ocorra um erro de solicitação (ex: dados inválidos).</response>
             <response code="404">Caso não encontra o usuário.</response>
             <response code="422">Caso ocorra um problema durante a exclusão.</response>
             <response code="500">Se ocorrer um erro interno no servidor.</response>
        </member>
        <member name="M:api_bookStore.App.Modules.User.Repository.UserRepository.UserAdd(api_bookStore.App.Modules.User.ViewModel.UserViewModelCreate)">
            <summary>
            Adiciona um novo usuário ao sistema.
            </summary>
            <param name="userViewModelCreate">O modelo de usuário que será adicionado.</param>
            <returns>O usuário recém-adicionado.</returns>
            <exception cref="T:System.Exception">Lançado quando ocorre um erro interno de servidor.</exception>
        </member>
        <member name="M:api_bookStore.App.Modules.User.Repository.UserRepository.UserAtt(System.String,api_bookStore.App.Modules.User.ViewModel.UserViewModelUpdate)">
            <summary>
            Atualiza os dados de um usuário no sistema pelo seu id.
            </summary>
            <param name="userId">O id do usuário pesquisado.</param>
            <param name="userViewModelUpdate">O modelo de usuário contendo os dados a serem cadastrados.</param>
            <returns>O usuário com dados atualizados.</returns>
            <exception cref="T:api_BookStore.App.Exceptions.NotFound">Lançado quando o usuário não é encontrado pelo id.</exception>
            <exception cref="T:api_BookStore.App.Exceptions.UpdateException">Lançado quando ocorre um erro durante a atualização dos dados.</exception>
            <exception cref="T:System.Exception">Lançado quando ocorre um erro interno de servidor.</exception>
        </member>
        <member name="M:api_bookStore.App.Modules.User.Repository.UserRepository.UserDel(System.String)">
            <summary>
            Deleta um usuário no sistema pelo seu id.
            </summary>
            <param name="userId">O id do usuário a ser deletado.</param>
            <returns>True se o usuário for deletado com sucesso.</returns>
            <exception cref="T:api_BookStore.App.Exceptions.NotFound">Lançado quando o usuário não é encontrado pelo id.</exception>
            <exception cref="T:api_BookStore.App.Exceptions.RemoveException">Lançado quando ocorre um erro durante a exclusão.</exception>
            <exception cref="T:System.Exception">Lançado quando ocorre um erro interno de servidor.</exception>
        </member>
        <member name="M:api_bookStore.App.Modules.User.Repository.UserRepository.User(System.String)">
            <summary>
            Busca um usuário no sistema pelo seu id.
            </summary>
            <param name="userId">O id do usuário pesquisado.</param>
            <returns>O usuário encontrado.</returns>
            <exception cref="T:System.Exception">Lançado quando ocorre um erro interno de servidor.</exception>
        </member>
        <member name="M:api_bookStore.App.Modules.User.Repository.UserRepository.UserByEmail(System.String)">
            <summary>
            Busca um usuário no sistema pelo seu email.
            </summary>
            <param name="email">O id do usuário pesquisado.</param>
            <returns>O usuário encontrado.</returns>
            <exception cref="T:System.Exception">Lançado quando ocorre um erro interno de servidor.</exception>
        </member>
        <member name="M:api_bookStore.App.Modules.User.Repository.UserRepository.Users">
            <summary>
            Busca todos usuários cadastrados no sistema.
            </summary>
            <returns>Lista vazia ou de usuarios cadastrados.</returns>
            <exception cref="T:System.Exception">Lançado quando ocorre um erro interno de servidor.</exception>
        </member>
        <member name="T:api_bookStore.App.Services.AutoMapper.AutoMapperService">
            <summary>
            Configura o mapeamento entre entidades e DTOs utilizando o AutoMapper.
            </summary>
        </member>
        <member name="M:api_bookStore.App.Services.AutoMapper.AutoMapperService.#ctor">
            <summary>
            Construtor que define os mapeamentos entre as entidades e os DTOs.
            </summary>
        </member>
        <member name="T:api_bookStore.App.Services.Jwt.JwtTokenService">
            <summary>
            Serviço para geração de tokens JWT.
            </summary>
            
            <param name="configuration">Configurações da aplicação, incluindo a chave secreta para assinatura do token.</param>
        </member>
        <member name="M:api_bookStore.App.Services.Jwt.JwtTokenService.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Serviço para geração de tokens JWT.
            </summary>
            
            <param name="configuration">Configurações da aplicação, incluindo a chave secreta para assinatura do token.</param>
        </member>
        <member name="M:api_bookStore.App.Services.Jwt.JwtTokenService.GenerateJwtToken(System.String,System.String)">
            <summary>
            Gera um token JWT com base nas credenciais do usuário e configuração fornecida.
            </summary>
            <param name="userId">ID do usuário que será incluído no token como claim.</param>
            <param name="role">Função ou papel do usuário (como "Admin", "User", etc.) que será incluída no token como claim.</param>
            <returns>Um token JWT assinado.</returns>
            <exception cref="T:System.Exception">Lançado quando a chave secreta não é encontrada nas configurações.</exception>
        </member>
        <member name="T:api_bookStore.App.Services.Swagger.SwaggerService">
            <summary>
            Serviço que aplica as descrições e valores padrão aos parâmetros de operação no Swagger.
            </summary>
        </member>
        <member name="M:api_bookStore.App.Services.Swagger.SwaggerService.Apply(Microsoft.OpenApi.Models.OpenApiOperation,Swashbuckle.AspNetCore.SwaggerGen.OperationFilterContext)">
            <summary>
            Aplica descrições e valores padrão para os parâmetros da operação no Swagger.
            </summary>
            <param name="operation">A operação da API a ser modificada.</param>
            <param name="context">O contexto que fornece informações sobre a operação e parâmetros.</param>
        </member>
        <member name="T:api_bookStore.Migrations.First">
            <inheritdoc />
        </member>
        <member name="M:api_bookStore.Migrations.First.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:api_bookStore.Migrations.First.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:api_bookStore.Migrations.First.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:api_BookStore.App.Exceptions.AvailableQuantity">
            <summary>
            Exceção personalizada lançada quando a quantidade disponível de um produto é insuficiente.
            </summary>
        </member>
        <member name="P:api_BookStore.App.Exceptions.AvailableQuantity.StatusCode">
            <summary>
            Código de status HTTP associado a esta exceção. O padrão é 423 (Locked).
            </summary>
        </member>
        <member name="M:api_BookStore.App.Exceptions.AvailableQuantity.#ctor">
            <summary>
            Inicializa uma nova instância da classe <see cref="T:api_BookStore.App.Exceptions.AvailableQuantity"/> com uma mensagem padrão.
            </summary>
        </member>
        <member name="M:api_BookStore.App.Exceptions.AvailableQuantity.#ctor(System.String)">
            <summary>
            Inicializa uma nova instância da classe <see cref="T:api_BookStore.App.Exceptions.AvailableQuantity"/> com uma mensagem personalizada.
            </summary>
            <param name="message">A mensagem de erro que descreve o motivo da exceção.</param>
        </member>
        <member name="M:api_BookStore.App.Exceptions.AvailableQuantity.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa uma nova instância da classe <see cref="T:api_BookStore.App.Exceptions.AvailableQuantity"/> com uma mensagem personalizada e uma exceção interna.
            </summary>
            <param name="message">A mensagem de erro que descreve o motivo da exceção.</param>
            <param name="innerException">A exceção interna que causou esta exceção.</param>
        </member>
        <member name="T:api_BookStore.App.Exceptions.BadRequest">
            <summary>
            Exceção personalizada lançada quando uma requisição é considerada inválida (erro 400 - Bad Request).
            </summary>
        </member>
        <member name="P:api_BookStore.App.Exceptions.BadRequest.StatusCode">
            <summary>
            Código de status HTTP associado a esta exceção. O padrão é 400 (Bad Request).
            </summary>
        </member>
        <member name="M:api_BookStore.App.Exceptions.BadRequest.#ctor">
            <summary>
            Inicializa uma nova instância da classe <see cref="T:api_BookStore.App.Exceptions.BadRequest"/> com uma mensagem padrão.
            </summary>
        </member>
        <member name="M:api_BookStore.App.Exceptions.BadRequest.#ctor(System.String)">
            <summary>
            Inicializa uma nova instância da classe <see cref="T:api_BookStore.App.Exceptions.BadRequest"/> com uma mensagem personalizada.
            </summary>
            <param name="message">A mensagem de erro que descreve o motivo da exceção.</param>
        </member>
        <member name="M:api_BookStore.App.Exceptions.BadRequest.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa uma nova instância da classe <see cref="T:api_BookStore.App.Exceptions.BadRequest"/> com uma mensagem personalizada e uma exceção interna.
            </summary>
            <param name="message">A mensagem de erro que descreve o motivo da exceção.</param>
            <param name="innerException">A exceção interna que causou esta exceção.</param>
        </member>
        <member name="T:api_BookStore.App.Exceptions.CreateException">
            <summary>
            Exceção personalizada lançada quando ocorre um erro durante o processo de criação de um recurso.
            </summary>
        </member>
        <member name="P:api_BookStore.App.Exceptions.CreateException.StatusCode">
            <summary>
            Código de status HTTP associado a esta exceção. O padrão é 422 (Unprocessable Entity).
            </summary>
        </member>
        <member name="M:api_BookStore.App.Exceptions.CreateException.#ctor">
            <summary>
            Inicializa uma nova instância da classe <see cref="T:api_BookStore.App.Exceptions.CreateException"/> com uma mensagem padrão.
            </summary>
        </member>
        <member name="M:api_BookStore.App.Exceptions.CreateException.#ctor(System.String)">
            <summary>
            Inicializa uma nova instância da classe <see cref="T:api_BookStore.App.Exceptions.CreateException"/> com uma mensagem personalizada.
            </summary>
            <param name="message">A mensagem de erro que descreve o motivo da exceção.</param>
        </member>
        <member name="M:api_BookStore.App.Exceptions.CreateException.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa uma nova instância da classe <see cref="T:api_BookStore.App.Exceptions.CreateException"/> com uma mensagem personalizada e uma exceção interna.
            </summary>
            <param name="message">A mensagem de erro que descreve o motivo da exceção.</param>
            <param name="innerException">A exceção interna que causou esta exceção.</param>
        </member>
        <member name="T:api_BookStore.App.Exceptions.InvalidCredential">
            <summary>
            Exceção personalizada lançada quando as credenciais fornecidas são inválidas.
            Geralmente usada em casos de falha de autenticação.
            </summary>
        </member>
        <member name="P:api_BookStore.App.Exceptions.InvalidCredential.StatusCode">
            <summary>
            Código de status HTTP associado a esta exceção. O padrão é 401 (Unauthorized).
            </summary>
        </member>
        <member name="M:api_BookStore.App.Exceptions.InvalidCredential.#ctor">
            <summary>
            Inicializa uma nova instância da classe <see cref="T:api_BookStore.App.Exceptions.InvalidCredential"/> com uma mensagem padrão.
            </summary>
        </member>
        <member name="M:api_BookStore.App.Exceptions.InvalidCredential.#ctor(System.String)">
            <summary>
            Inicializa uma nova instância da classe <see cref="T:api_BookStore.App.Exceptions.InvalidCredential"/> com uma mensagem personalizada.
            </summary>
            <param name="message">A mensagem de erro que descreve o motivo da exceção.</param>
        </member>
        <member name="M:api_BookStore.App.Exceptions.InvalidCredential.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa uma nova instância da classe <see cref="T:api_BookStore.App.Exceptions.InvalidCredential"/> com uma mensagem personalizada e uma exceção interna.
            </summary>
            <param name="message">A mensagem de erro que descreve o motivo da exceção.</param>
            <param name="innerException">A exceção interna que causou esta exceção.</param>
        </member>
        <member name="T:api_BookStore.App.Exceptions.NotAuthenticated">
            <summary>
            Exceção personalizada lançada quando um usuário não está autenticado.
            Geralmente usada quando o usuário tenta acessar um recurso protegido sem estar autenticado.
            </summary>
        </member>
        <member name="P:api_BookStore.App.Exceptions.NotAuthenticated.StatusCode">
            <summary>
            Código de status HTTP associado a esta exceção. O padrão é 401 (Unauthorized).
            </summary>
        </member>
        <member name="M:api_BookStore.App.Exceptions.NotAuthenticated.#ctor">
            <summary>
            Inicializa uma nova instância da classe <see cref="T:api_BookStore.App.Exceptions.NotAuthenticated"/> com uma mensagem padrão.
            </summary>
        </member>
        <member name="M:api_BookStore.App.Exceptions.NotAuthenticated.#ctor(System.String)">
            <summary>
            Inicializa uma nova instância da classe <see cref="T:api_BookStore.App.Exceptions.NotAuthenticated"/> com uma mensagem personalizada.
            </summary>
            <param name="message">A mensagem de erro que descreve o motivo da exceção.</param>
        </member>
        <member name="M:api_BookStore.App.Exceptions.NotAuthenticated.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa uma nova instância da classe <see cref="T:api_BookStore.App.Exceptions.NotAuthenticated"/> com uma mensagem personalizada e uma exceção interna.
            </summary>
            <param name="message">A mensagem de erro que descreve o motivo da exceção.</param>
            <param name="innerException">A exceção interna que causou esta exceção.</param>
        </member>
        <member name="T:api_BookStore.App.Exceptions.NotAuthorized">
            <summary>
            Exceção personalizada lançada quando um usuário não tem permissão para acessar um recurso.
            Geralmente usada quando o usuário está autenticado, mas não possui os privilégios necessários.
            </summary>
        </member>
        <member name="P:api_BookStore.App.Exceptions.NotAuthorized.StatusCode">
            <summary>
            Código de status HTTP associado a esta exceção. O padrão é 403 (Forbidden).
            </summary>
        </member>
        <member name="M:api_BookStore.App.Exceptions.NotAuthorized.#ctor">
            <summary>
            Inicializa uma nova instância da classe <see cref="T:api_BookStore.App.Exceptions.NotAuthorized"/> com uma mensagem padrão.
            </summary>
        </member>
        <member name="M:api_BookStore.App.Exceptions.NotAuthorized.#ctor(System.String)">
            <summary>
            Inicializa uma nova instância da classe <see cref="T:api_BookStore.App.Exceptions.NotAuthorized"/> com uma mensagem personalizada.
            </summary>
            <param name="message">A mensagem de erro que descreve o motivo da exceção.</param>
        </member>
        <member name="M:api_BookStore.App.Exceptions.NotAuthorized.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa uma nova instância da classe <see cref="T:api_BookStore.App.Exceptions.NotAuthorized"/> com uma mensagem personalizada e uma exceção interna.
            </summary>
            <param name="message">A mensagem de erro que descreve o motivo da exceção.</param>
            <param name="innerException">A exceção interna que causou esta exceção.</param>
        </member>
        <member name="T:api_BookStore.App.Exceptions.NotFound">
            <summary>
            Exceção personalizada lançada quando um recurso não é encontrado.
            Geralmente usada quando uma consulta ou operação retorna nenhum resultado.
            </summary>
        </member>
        <member name="P:api_BookStore.App.Exceptions.NotFound.StatusCode">
            <summary>
            Código de status HTTP associado a esta exceção. O padrão é 404 (Not Found).
            </summary>
        </member>
        <member name="M:api_BookStore.App.Exceptions.NotFound.#ctor">
            <summary>
            Inicializa uma nova instância da classe <see cref="T:api_BookStore.App.Exceptions.NotFound"/> com uma mensagem padrão.
            </summary>
        </member>
        <member name="M:api_BookStore.App.Exceptions.NotFound.#ctor(System.String)">
            <summary>
            Inicializa uma nova instância da classe <see cref="T:api_BookStore.App.Exceptions.NotFound"/> com uma mensagem personalizada.
            </summary>
            <param name="message">A mensagem de erro que descreve o motivo da exceção.</param>
        </member>
        <member name="M:api_BookStore.App.Exceptions.NotFound.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa uma nova instância da classe <see cref="T:api_BookStore.App.Exceptions.NotFound"/> com uma mensagem personalizada e uma exceção interna.
            </summary>
            <param name="message">A mensagem de erro que descreve o motivo da exceção.</param>
            <param name="innerException">A exceção interna que causou esta exceção.</param>
        </member>
        <member name="T:api_BookStore.App.Exceptions.RemoveException">
            <summary>
            Exceção personalizada lançada quando ocorre um erro ao tentar remover um recurso.
            Geralmente usada quando uma operação de remoção falha devido a alguma condição inesperada.
            </summary>
        </member>
        <member name="P:api_BookStore.App.Exceptions.RemoveException.StatusCode">
            <summary>
            Código de status HTTP associado a esta exceção. O padrão é 422 (Unprocessable Entity).
            </summary>
        </member>
        <member name="M:api_BookStore.App.Exceptions.RemoveException.#ctor">
            <summary>
            Inicializa uma nova instância da classe <see cref="T:api_BookStore.App.Exceptions.RemoveException"/> com uma mensagem padrão.
            </summary>
        </member>
        <member name="M:api_BookStore.App.Exceptions.RemoveException.#ctor(System.String)">
            <summary>
            Inicializa uma nova instância da classe <see cref="T:api_BookStore.App.Exceptions.RemoveException"/> com uma mensagem personalizada.
            </summary>
            <param name="message">A mensagem de erro que descreve o motivo da exceção.</param>
        </member>
        <member name="M:api_BookStore.App.Exceptions.RemoveException.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa uma nova instância da classe <see cref="T:api_BookStore.App.Exceptions.RemoveException"/> com uma mensagem personalizada e uma exceção interna.
            </summary>
            <param name="message">A mensagem de erro que descreve o motivo da exceção.</param>
            <param name="innerException">A exceção interna que causou esta exceção.</param>
        </member>
        <member name="T:api_BookStore.App.Exceptions.UniqueKeyException">
            <summary>
            Exceção personalizada lançada quando ocorre um erro devido à violação de uma chave única.
            Geralmente usada quando uma operação de inserção ou atualização tenta inserir um valor duplicado
            em uma coluna que exige unicidade no banco de dados.
            </summary>
        </member>
        <member name="P:api_BookStore.App.Exceptions.UniqueKeyException.StatusCode">
            <summary>
            Código de status HTTP associado a esta exceção. O padrão é 423 (Locked).
            </summary>
        </member>
        <member name="M:api_BookStore.App.Exceptions.UniqueKeyException.#ctor">
            <summary>
            Inicializa uma nova instância da classe <see cref="T:api_BookStore.App.Exceptions.UniqueKeyException"/> com uma mensagem padrão.
            </summary>
        </member>
        <member name="M:api_BookStore.App.Exceptions.UniqueKeyException.#ctor(System.String)">
            <summary>
            Inicializa uma nova instância da classe <see cref="T:api_BookStore.App.Exceptions.UniqueKeyException"/> com uma mensagem personalizada.
            </summary>
            <param name="message">A mensagem de erro que descreve o motivo da exceção.</param>
        </member>
        <member name="M:api_BookStore.App.Exceptions.UniqueKeyException.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa uma nova instância da classe <see cref="T:api_BookStore.App.Exceptions.UniqueKeyException"/> com uma mensagem personalizada e uma exceção interna.
            </summary>
            <param name="message">A mensagem de erro que descreve o motivo da exceção.</param>
            <param name="innerException">A exceção interna que causou esta exceção.</param>
        </member>
        <member name="T:api_BookStore.App.Exceptions.UpdateException">
            <summary>
            Exceção personalizada lançada quando ocorre um erro durante o processo de atualização de um recurso.
            Geralmente usada quando uma operação de atualização falha, seja por falhas de validação,
            inconsistências de dados ou outras condições inesperadas.
            </summary>
        </member>
        <member name="P:api_BookStore.App.Exceptions.UpdateException.StatusCode">
            <summary>
            Código de status HTTP associado a esta exceção. O padrão é 422 (Unprocessable Entity).
            </summary>
        </member>
        <member name="M:api_BookStore.App.Exceptions.UpdateException.#ctor">
            <summary>
            Inicializa uma nova instância da classe <see cref="T:api_BookStore.App.Exceptions.UpdateException"/> com uma mensagem padrão.
            </summary>
        </member>
        <member name="M:api_BookStore.App.Exceptions.UpdateException.#ctor(System.String)">
            <summary>
            Inicializa uma nova instância da classe <see cref="T:api_BookStore.App.Exceptions.UpdateException"/> com uma mensagem personalizada.
            </summary>
            <param name="message">A mensagem de erro que descreve o motivo da exceção.</param>
        </member>
        <member name="M:api_BookStore.App.Exceptions.UpdateException.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa uma nova instância da classe <see cref="T:api_BookStore.App.Exceptions.UpdateException"/> com uma mensagem personalizada e uma exceção interna.
            </summary>
            <param name="message">A mensagem de erro que descreve o motivo da exceção.</param>
            <param name="innerException">A exceção interna que causou esta exceção.</param>
        </member>
        <member name="T:api_BookStore.App.Middlewares.CustomExceptionMiddleware">
            <summary>
            Middleware personalizado para interceptar e tratar exceções específicas durante a execução da requisição.
            Essa classe captura exceções definidas, registra os erros e retorna uma resposta JSON apropriada com o código de status HTTP correspondente.
            </summary>
            <remarks>
            Inicializa uma nova instância do middleware de exceções personalizadas.
            </remarks>
            <param name="next">O próximo delegado de requisição.</param>
            <param name="logger">O logger usado para registrar os erros.</param>
        </member>
        <member name="M:api_BookStore.App.Middlewares.CustomExceptionMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Logging.ILogger{api_BookStore.App.Middlewares.CustomExceptionMiddleware})">
            <summary>
            Middleware personalizado para interceptar e tratar exceções específicas durante a execução da requisição.
            Essa classe captura exceções definidas, registra os erros e retorna uma resposta JSON apropriada com o código de status HTTP correspondente.
            </summary>
            <remarks>
            Inicializa uma nova instância do middleware de exceções personalizadas.
            </remarks>
            <param name="next">O próximo delegado de requisição.</param>
            <param name="logger">O logger usado para registrar os erros.</param>
        </member>
        <member name="M:api_BookStore.App.Middlewares.CustomExceptionMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Intercepta as requisições e captura exceções específicas, retornando uma resposta adequada para cada tipo de erro.
            </summary>
            <param name="context">O contexto HTTP da requisição.</param>
            <returns>Uma tarefa assíncrona que representa o resultado da operação de processamento da requisição.</returns>
        </member>
        <member name="M:api_BookStore.App.Middlewares.CustomExceptionMiddleware.HandleExceptionAsync(Microsoft.AspNetCore.Http.HttpContext,System.Exception,System.Int32)">
            <summary>
            Processa a exceção e retorna uma resposta JSON contendo a mensagem e o rastreamento de pilha do erro.
            </summary>
            <param name="context">O contexto HTTP da requisição.</param>
            <param name="ex">A exceção que ocorreu.</param>
            <param name="statusCode">O código de status HTTP a ser retornado na resposta.</param>
            <returns>Uma tarefa assíncrona que representa a operação de escrita da resposta.</returns>
        </member>
    </members>
</doc>
